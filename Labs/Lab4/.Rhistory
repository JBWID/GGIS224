knitr::opts_chunk$set(echo = TRUE)
library(sf)
library(dplyr)
library(spData) #data package needed for this lab
data("nz_height")
data("nz")
library(sf)
library(dplyr)
library(spData)
data("nz_height")
data("nz")
#Enter your code chunk that solves the question. Please leave comments as in detail as possible to show your logical development.
#For example, you can start with:
canterbury <- nz %>% filter(Name == "Canterbury") #Subset the boundary of Canterbury from nz, using attribute subsetting.
high_points
#Enter your code chunk that solves the question. Please leave comments as in detail as possible to show your logical development.
#For example, you can start with:
#Subset the boundary of Canterbury from nz, using attribute subsetting.
canterbury <- nz %>% filter(Name == "Canterbury")
#Subset the high points from nz_height that are intersected by Canterbury, using spatial subsetting.
canterbury_height <- st_intersection(nz_height, st_geometry(canterbury))
high_points <- nrow(canterbury_height)
high_points
#Enter your code chunk that creates the plot.
plot(st_geometry(canterbury), add = TRUE)
points(st_geometry(other_heights), col = "blue", pch = 1)
#Enter your code chunk that creates the plot.
plot(st_geometry(canterbury), col = "yellow", add = TRUE)
plot(st_geometry(nz))
plot(st_geometry(canterbury), col = "yellow", add = TRUE)
# Plot high points in Canterbury in red
points(st_geometry(canterbury_height), col = "red", pch = 4)
plot(st_geometry(nz))
plot(st_geometry(canterbury), col = "yellow", add = TRUE)
# Plot high points in Canterbury in red (if any)
if (nrow(canterbury_height) > 0) {
coords_canterbury_height <- st_coordinates(canterbury_height)
points(coords_canterbury_height, col = "red", pch = 4)
}
# Plot high points in other parts of New Zealand in blue (if any)
other_heights <- st_difference(nz_height, st_geometry(canterbury))
if (nrow(other_heights) > 0) {
coords_other_height <- st_coordinates(other_heights)
points(coords_canterbury_height, col = "blue", pch = 1)
}
plot(st_geometry(nz))
plot(st_geometry(canterbury), col = "yellow", add = TRUE)
# Plot high points in Canterbury in red (if any)
if (nrow(canterbury_height) > 0) {
coords_canterbury_height <- st_coordinates(canterbury_height)
points(coords_canterbury_height, col = "red")
}
# Plot high points in other parts of New Zealand in blue (if any)
other_heights <- st_difference(nz_height, st_geometry(canterbury))
if (nrow(other_heights) > 0) {
coords_other_height <- st_coordinates(other_heights)
points(coords_canterbury_height, col = "blue")
}
nz_height_region <- st_join(nz_height, nz)
aggregate_data = <- nz_height_region %>%
nz_height_region <- st_join(nz_height, nz)
aggregate_data = <- nz_height_region %>%
nz_height_region <- st_join(nz_height, nz)
aggregate_data <- nz_height_region %>%
group_by(Name) %>%
summarize(Count = n(), Average_Elevation = mean(ELEV))
View(canterbury_height)
View(canterbury_height)
View(canterbury)
View(other_heights)
nz_height_region <- st_join(nz_height, nz)
aggregate_data <- nz_height_region %>%
group_by(Name) %>%
summarize(Count = n(), Average_Elevation = mean(elevation))
aggregate_data <- aggregate_data[order(-aggregate_data$Count),]
second_highest <- aggregate_data[2, ]
second_highest
colorado <- us_states[us_states$NAME == "Colorado", ]
plot(st_geometry(us_states))
plot(st_geometry(colorado), col = "blue", add = TRUE)
contiguos_states_indices <- st_touches(colorado, us_states)[[1]]
contigous_states <- us_states[contiguos_states_indices, ]
plot(st_geometry(contigous_states), col = "yellow", add = TRUE)
states_within_200_indices <- st_is_within_distance(colorado, us_states, dist = 200*1609.34)
near_states <- us_states[unlist(near_states_indices), ]
colorado <- us_states[us_states$NAME == "Colorado", ]
plot(st_geometry(us_states))
plot(st_geometry(colorado), col = "blue", add = TRUE)
contiguos_states_indices <- st_touches(colorado, us_states)[[1]]
contigous_states <- us_states[contiguos_states_indices, ]
plot(st_geometry(contigous_states), col = "yellow", add = TRUE)
states_within_200_indices <- st_is_within_distance(colorado, us_states, dist = 200*1609.34)
near_states <- us_states[unlist(states_within_200_indices), ]
plot(st_geometry(near_states), border = "red", add = TRUE, lwd = 2)
