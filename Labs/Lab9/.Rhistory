tm_shape(aggregate(dem, 10), raster.downsample = TRUE)+
tm_raster(style = "cont", palette = "PuOr", legend.show = TRUE)+
tm_scale_bar()
}
# Set pour points
ppoints <- tribble(
~Lon, ~Lat,
-91.984427, 40.718717,
-91.384747, 40.591037
)
wbt_d8_flow_accumulation(input = paste0(my_directory, "/dem_filled_breached.tif"), output = paste0(my_directory, "/D8FA.tif"))
#Read the produced flow accumulation file
wbt_d8_flow_accumulation_lyr = rast("D8FA.tif")
#Visualize the flow accumulation map
if (ncol(wbt_d8_flow_accumulation_lyr)<1000 & nrow(wbt_d8_flow_accumulation_lyr)<1000)
{
tm_shape(wbt_d8_flow_accumulation_lyr)+
tm_raster(style = "quantile", legend.show = TRUE)+ #Fisher or quantile classification method is used to enhance visualization for flow accumulation (distribution dominated by small values)
tm_scale_bar()
} else {
tm_shape(aggregate(wbt_d8_flow_accumulation_lyr, 10), raster.downsample = TRUE)+
tm_raster(style = "quantile", legend.show = TRUE)+ #Fisher or quantile classification method is used to enhance visualization for flow accumulation (distribution dominated by small values)
tm_scale_bar()
}
# Set working directory to location of DEM.tif file
my_directory <- "/Users/jonathanbernard/Desktop/UIUC/Spring 2024/GGIS 224/GGIS224/Labs/Lab9"
setwd(my_directory)
# Read the dem
dem = rast("dem.tif")
# Visualize the DEM
if (ncol(dem)<1000 & nrow(dem)<1000)
{
tm_shape(dem)+
tm_raster(style = "cont", palette = "PuOr", legend.show = TRUE)+
tm_scale_bar()
} else {
tm_shape(aggregate(dem, 10), raster.downsample = TRUE)+
tm_raster(style = "cont", palette = "PuOr", legend.show = TRUE)+
tm_scale_bar()
}
# preparing dem for hydrology analysis
# fill in the dem
wbt_fill_single_cell_pits(dem = paste0(my_directory, "/dem.tif"),  output = paste0(my_directory, "/dem_filled.tif"))
wbt_breach_depressions_least_cost(
dem = paste0(my_directory, "/dem_filled.tif"),
output = paste0(my_directory, "/dem_breached.tif"),
dist = 5,
fill = TRUE)
wbt_fill_depressions_wang_and_liu(
dem = paste0(my_directory, "/dem_breached.tif"),
output = paste0(my_directory, "/dem_filled_breached.tif"),
)
#Read the smoothed dem
dem = rast("dem_filled_breached.tif")
#Map the DEM
if (ncol(dem)<1000 & nrow(dem)<1000)
{
tm_shape(dem)+
tm_raster(style = "cont", palette = "PuOr", legend.show = TRUE)+
tm_scale_bar()
} else {
tm_shape(aggregate(dem, 10), raster.downsample = TRUE)+
tm_raster(style = "cont", palette = "PuOr", legend.show = TRUE)+
tm_scale_bar()
}
# Create flow accumulation and pointer grids (flow direction)
#Generate the flow accumulation map. Make sure to use the filled DEM "dem_filled_breached.tif"!!
wbt_d8_flow_accumulation(input = paste0(my_directory, "/dem_filled_breached.tif"), output = paste0(my_directory, "/D8FA.tif"))
#Read the produced flow accumulation file
wbt_d8_flow_accumulation_lyr = rast("D8FA.tif")
#Visualize the flow accumulation map
if (ncol(wbt_d8_flow_accumulation_lyr)<1000 & nrow(wbt_d8_flow_accumulation_lyr)<1000)
{
tm_shape(wbt_d8_flow_accumulation_lyr)+
tm_raster(style = "quantile", legend.show = TRUE)+ #Fisher or quantile classification method is used to enhance visualization for flow accumulation (distribution dominated by small values)
tm_scale_bar()
} else {
tm_shape(aggregate(wbt_d8_flow_accumulation_lyr, 10), raster.downsample = TRUE)+
tm_raster(style = "quantile", legend.show = TRUE)+ #Fisher or quantile classification method is used to enhance visualization for flow accumulation (distribution dominated by small values)
tm_scale_bar()
}
#Generate the flow direction (pointer) map
wbt_d8_pointer(dem = paste0(my_directory, "/dem_filled_breached.tif"), output = paste0(my_directory, "/D8pointer.tif"))
#Read the produced flow direction file
wbt_d8_pointer_lyr = rast("D8pointer.tif")
#Visualize the flow direction map
if (ncol(wbt_d8_pointer_lyr)<1000 & nrow(wbt_d8_pointer_lyr)<1000)
{
tm_shape(wbt_d8_pointer_lyr)+
tm_raster(style = "cont", legend.show = TRUE)+
tm_scale_bar()
} else {
tm_shape(aggregate(wbt_d8_pointer_lyr, 10, fun = modal), raster.downsample = TRUE)+ #here modal function is used for aggregating the discrete D8 flow directions.
tm_raster(style = "cont", legend.show = TRUE)+
tm_scale_bar()
}
# Set pour points
ppoints <- tribble(
~Lon, ~Lat,
-91.984427, 40.718717,
-91.384747, 40.591037
)
#Create dataframe with pour points (make sure to set up the correct spatial coordinate system)
ppointsSP <- SpatialPoints(ppoints, proj4string = CRS("+proj=longlat +datum=WGS84")) #
#Convert data frame to shapefile and write the shapefile to our data directory
shapefile(ppointsSP, filename = "pourpoints.shp", overwrite = TRUE)
#Read the shapefile
ppointsSP_gcs = st_read("pourpoints.shp")
st_crs(dem)
#Create dataframe with pour points (make sure to set up the correct spatial coordinate system)
ppointsSP <- SpatialPoints(ppoints, proj4string = CRS("+proj=longlat +datum=WGS84")) #
#Convert data frame to shapefile and write the shapefile to our data directory
shapefile(ppointsSP, filename = "pourpoints.shp", overwrite = TRUE)
#Read the shapefile
ppointsSP_gcs = st_read("pourpoints.shp")
ppointsSP_prj <- st_transform(ppointsSP_gcs, crs = "EPSG:26915")
t_write(ppointsSP_prj, "ppointsSP_prj.shp", layer_options = 'OVERWRITE=YES', update = TRUE)
st_write(ppointsSP_prj, "ppointsSP_prj.shp", layer_options = 'OVERWRITE=YES', update = TRUE)
st_write(ppointsSP_prj, "ppointsSP_prj.shp", layer_options = 'OVERWRITE=YES', update = TRUE)
wbt_extract_streams(flow_accum = paste0(my_directory, "/D8FA.tif"),
output = paste0(my_directory, "/raster_streams.tif"),
threshold = 50)
wbt_jenson_snap_pour_points(pour_pts = paste0(my_directory, "/ppointsSP_prj.shp"),
streams = paste0(my_directory, "/raster_streams.tif"),
output = paste0(my_directory, "/snappedpp.shp"),
snap_dist = 150)
#Read the produced files
streams <- raster("raster_streams.tif") #Read the generated stream network
pp = shapefile("snappedpp.shp") #Read the snapped pour points
#Visualize the pour points BEFORE being snapped to the network.
if (ncol(streams)<1000 & nrow(streams)<1000)
{
tm_shape(streams)+
tm_raster(legend.show = TRUE, palette = "Blues")+
tm_shape(ppointsSP_prj)+
tm_dots(col = "red")
} else {
tm_shape(aggregate(streams, 10, fun = max), raster.downsample = TRUE)+ #downsample function set to be MAX to improve continuity of the stream network.
tm_raster(legend.show = TRUE, palette = "Blues")+
tm_shape(ppointsSP_prj)+
tm_dots(col = "red")
}
# Area of interest -> missouri river area
# Set working directory to location of DEM.tif file
my_directory <- "/Users/jonathanbernard/Desktop/UIUC/Spring 2024/GGIS 224/GGIS224/Labs/Lab9"
setwd(my_directory)
# Read the dem
dem = rast("dem.tif")
# Visualize the DEM
if (ncol(dem)<1000 & nrow(dem)<1000)
{
tm_shape(dem)+
tm_raster(style = "cont", palette = "PuOr", legend.show = TRUE)+
tm_scale_bar()
} else {
tm_shape(aggregate(dem, 10), raster.downsample = TRUE)+
tm_raster(style = "cont", palette = "PuOr", legend.show = TRUE)+
tm_scale_bar()
}
# preparing dem for hydrology analysis
# fill in the dem
wbt_fill_single_cell_pits(dem = paste0(my_directory, "/dem.tif"),  output = paste0(my_directory, "/dem_filled.tif"))
wbt_breach_depressions_least_cost(
dem = paste0(my_directory, "/dem_filled.tif"),
output = paste0(my_directory, "/dem_breached.tif"),
dist = 5,
fill = TRUE)
wbt_fill_depressions_wang_and_liu(
dem = paste0(my_directory, "/dem_breached.tif"),
output = paste0(my_directory, "/dem_filled_breached.tif"),
)
#Read the smoothed dem
dem = rast("dem_filled_breached.tif")
#Map the DEM
if (ncol(dem)<1000 & nrow(dem)<1000)
{
tm_shape(dem)+
tm_raster(style = "cont", palette = "PuOr", legend.show = TRUE)+
tm_scale_bar()
} else {
tm_shape(aggregate(dem, 10), raster.downsample = TRUE)+
tm_raster(style = "cont", palette = "PuOr", legend.show = TRUE)+
tm_scale_bar()
}
# Create flow accumulation and pointer grids (flow direction)
#Generate the flow accumulation map. Make sure to use the filled DEM "dem_filled_breached.tif"!!
wbt_d8_flow_accumulation(input = paste0(my_directory, "/dem_filled_breached.tif"), output = paste0(my_directory, "/D8FA.tif"))
#Read the produced flow accumulation file
wbt_d8_flow_accumulation_lyr = rast("D8FA.tif")
#Visualize the flow accumulation map
if (ncol(wbt_d8_flow_accumulation_lyr)<1000 & nrow(wbt_d8_flow_accumulation_lyr)<1000)
{
tm_shape(wbt_d8_flow_accumulation_lyr)+
tm_raster(style = "quantile", legend.show = TRUE)+ #Fisher or quantile classification method is used to enhance visualization for flow accumulation (distribution dominated by small values)
tm_scale_bar()
} else {
tm_shape(aggregate(wbt_d8_flow_accumulation_lyr, 10), raster.downsample = TRUE)+
tm_raster(style = "quantile", legend.show = TRUE)+ #Fisher or quantile classification method is used to enhance visualization for flow accumulation (distribution dominated by small values)
tm_scale_bar()
}
#Generate the flow direction (pointer) map
wbt_d8_pointer(dem = paste0(my_directory, "/dem_filled_breached.tif"), output = paste0(my_directory, "/D8pointer.tif"))
#Read the produced flow direction file
wbt_d8_pointer_lyr = rast("D8pointer.tif")
#Visualize the flow direction map
if (ncol(wbt_d8_pointer_lyr)<1000 & nrow(wbt_d8_pointer_lyr)<1000)
{
tm_shape(wbt_d8_pointer_lyr)+
tm_raster(style = "cont", legend.show = TRUE)+
tm_scale_bar()
} else {
tm_shape(aggregate(wbt_d8_pointer_lyr, 10, fun = modal), raster.downsample = TRUE)+ #here modal function is used for aggregating the discrete D8 flow directions.
tm_raster(style = "cont", legend.show = TRUE)+
tm_scale_bar()
}
# Set pour points
ppoints <- tribble(
~Lon, ~Lat,
-91.984427, 40.718717,
-91.384747, 40.591037
)
#Create dataframe with pour points (make sure to set up the correct spatial coordinate system)
ppointsSP <- SpatialPoints(ppoints, proj4string = CRS("+proj=longlat +datum=WGS84")) #
#Convert data frame to shapefile and write the shapefile to our data directory
shapefile(ppointsSP, filename = "pourpoints.shp", overwrite = TRUE)
#Read the shapefile
ppointsSP_gcs = st_read("pourpoints.shp")
ppointsSP_prj <- st_transform(ppointsSP_gcs, crs = "EPSG:26914")
st_write(ppointsSP_prj, "ppointsSP_prj.shp", layer_options = 'OVERWRITE=YES', update = TRUE)
wbt_extract_streams(flow_accum = paste0(my_directory, "/D8FA.tif"),
output = paste0(my_directory, "/raster_streams.tif"),
threshold = 50)
wbt_jenson_snap_pour_points(pour_pts = paste0(my_directory, "/ppointsSP_prj.shp"),
streams = paste0(my_directory, "/raster_streams.tif"),
output = paste0(my_directory, "/snappedpp.shp"),
snap_dist = 150)
#Read the produced files
streams <- raster("raster_streams.tif") #Read the generated stream network
pp = shapefile("snappedpp.shp") #Read the snapped pour points
#Visualize the pour points BEFORE being snapped to the network.
if (ncol(streams)<1000 & nrow(streams)<1000)
{
tm_shape(streams)+
tm_raster(legend.show = TRUE, palette = "Blues")+
tm_shape(ppointsSP_prj)+
tm_dots(col = "red")
} else {
tm_shape(aggregate(streams, 10, fun = max), raster.downsample = TRUE)+ #downsample function set to be MAX to improve continuity of the stream network.
tm_raster(legend.show = TRUE, palette = "Blues")+
tm_shape(ppointsSP_prj)+
tm_dots(col = "red")
}
# Area of interest -> missouri river area
# Set working directory to location of DEM.tif file
my_directory <- "/Users/jonathanbernard/Desktop/UIUC/Spring 2024/GGIS 224/GGIS224/Labs/Lab9"
setwd(my_directory)
# Read the dem
dem = rast("dem.tif")
# Visualize the DEM
if (ncol(dem)<1000 & nrow(dem)<1000)
{
tm_shape(dem)+
tm_raster(style = "cont", palette = "PuOr", legend.show = TRUE)+
tm_scale_bar()
} else {
tm_shape(aggregate(dem, 10), raster.downsample = TRUE)+
tm_raster(style = "cont", palette = "PuOr", legend.show = TRUE)+
tm_scale_bar()
}
# preparing dem for hydrology analysis
# fill in the dem
wbt_fill_single_cell_pits(dem = paste0(my_directory, "/dem.tif"),  output = paste0(my_directory, "/dem_filled.tif"))
wbt_breach_depressions_least_cost(
dem = paste0(my_directory, "/dem_filled.tif"),
output = paste0(my_directory, "/dem_breached.tif"),
dist = 5,
fill = TRUE)
wbt_fill_depressions_wang_and_liu(
dem = paste0(my_directory, "/dem_breached.tif"),
output = paste0(my_directory, "/dem_filled_breached.tif"),
)
#Read the smoothed dem
dem = rast("dem_filled_breached.tif")
#Map the DEM
if (ncol(dem)<1000 & nrow(dem)<1000)
{
tm_shape(dem)+
tm_raster(style = "cont", palette = "PuOr", legend.show = TRUE)+
tm_scale_bar()
} else {
tm_shape(aggregate(dem, 10), raster.downsample = TRUE)+
tm_raster(style = "cont", palette = "PuOr", legend.show = TRUE)+
tm_scale_bar()
}
# Create flow accumulation and pointer grids (flow direction)
#Generate the flow accumulation map. Make sure to use the filled DEM "dem_filled_breached.tif"!!
wbt_d8_flow_accumulation(input = paste0(my_directory, "/dem_filled_breached.tif"), output = paste0(my_directory, "/D8FA.tif"))
#Read the produced flow accumulation file
wbt_d8_flow_accumulation_lyr = rast("D8FA.tif")
#Visualize the flow accumulation map
if (ncol(wbt_d8_flow_accumulation_lyr)<1000 & nrow(wbt_d8_flow_accumulation_lyr)<1000)
{
tm_shape(wbt_d8_flow_accumulation_lyr)+
tm_raster(style = "quantile", legend.show = TRUE)+ #Fisher or quantile classification method is used to enhance visualization for flow accumulation (distribution dominated by small values)
tm_scale_bar()
} else {
tm_shape(aggregate(wbt_d8_flow_accumulation_lyr, 10), raster.downsample = TRUE)+
tm_raster(style = "quantile", legend.show = TRUE)+ #Fisher or quantile classification method is used to enhance visualization for flow accumulation (distribution dominated by small values)
tm_scale_bar()
}
#Generate the flow direction (pointer) map
wbt_d8_pointer(dem = paste0(my_directory, "/dem_filled_breached.tif"), output = paste0(my_directory, "/D8pointer.tif"))
#Read the produced flow direction file
wbt_d8_pointer_lyr = rast("D8pointer.tif")
#Visualize the flow direction map
if (ncol(wbt_d8_pointer_lyr)<1000 & nrow(wbt_d8_pointer_lyr)<1000)
{
tm_shape(wbt_d8_pointer_lyr)+
tm_raster(style = "cont", legend.show = TRUE)+
tm_scale_bar()
} else {
tm_shape(aggregate(wbt_d8_pointer_lyr, 10, fun = modal), raster.downsample = TRUE)+ #here modal function is used for aggregating the discrete D8 flow directions.
tm_raster(style = "cont", legend.show = TRUE)+
tm_scale_bar()
}
# Set pour points
ppoints <- tribble(
~Lon, ~Lat,
-91.984427, 40.718717,
-91.384747, 40.591037
)
#Create dataframe with pour points (make sure to set up the correct spatial coordinate system)
ppointsSP <- SpatialPoints(ppoints, proj4string = CRS("+proj=longlat +datum=WGS84")) #
#Convert data frame to shapefile and write the shapefile to our data directory
shapefile(ppointsSP, filename = "pourpoints.shp", overwrite = TRUE)
#Read the shapefile
ppointsSP_gcs = st_read("pourpoints.shp")
ppointsSP_prj <- st_transform(ppointsSP_gcs, crs = "EPSG:26915")
st_write(ppointsSP_prj, "ppointsSP_prj.shp", layer_options = 'OVERWRITE=YES', update = TRUE)
wbt_extract_streams(flow_accum = paste0(my_directory, "/D8FA.tif"),
output = paste0(my_directory, "/raster_streams.tif"),
threshold = 50)
wbt_jenson_snap_pour_points(pour_pts = paste0(my_directory, "/ppointsSP_prj.shp"),
streams = paste0(my_directory, "/raster_streams.tif"),
output = paste0(my_directory, "/snappedpp.shp"),
snap_dist = 150)
#Read the produced files
streams <- raster("raster_streams.tif") #Read the generated stream network
pp = shapefile("snappedpp.shp") #Read the snapped pour points
#Visualize the pour points BEFORE being snapped to the network.
if (ncol(streams)<1000 & nrow(streams)<1000)
{
tm_shape(streams)+
tm_raster(legend.show = TRUE, palette = "Blues")+
tm_shape(ppointsSP_prj)+
tm_dots(col = "red")
} else {
tm_shape(aggregate(streams, 10, fun = max), raster.downsample = TRUE)+ #downsample function set to be MAX to improve continuity of the stream network.
tm_raster(legend.show = TRUE, palette = "Blues")+
tm_shape(ppointsSP_prj)+
tm_dots(col = "red")
}
# Area of interest -> missouri river area
# Set working directory to location of DEM.tif file
my_directory <- "/Users/jonathanbernard/Desktop/UIUC/Spring 2024/GGIS 224/GGIS224/Labs/Lab9"
setwd(my_directory)
# Read the dem
dem = rast("dem.tif")
# Visualize the DEM
tmap_mode("view")
if (ncol(dem)<1000 & nrow(dem)<1000)
{
tm_shape(dem)+
tm_raster(style = "cont", palette = "PuOr", legend.show = TRUE)+
tm_scale_bar()
} else {
tm_shape(aggregate(dem, 10), raster.downsample = TRUE)+
tm_raster(style = "cont", palette = "PuOr", legend.show = TRUE)+
tm_scale_bar()
}
# preparing dem for hydrology analysis
# fill in the dem
wbt_fill_single_cell_pits(dem = paste0(my_directory, "/dem.tif"),  output = paste0(my_directory, "/dem_filled.tif"))
wbt_breach_depressions_least_cost(
dem = paste0(my_directory, "/dem_filled.tif"),
output = paste0(my_directory, "/dem_breached.tif"),
dist = 5,
fill = TRUE)
wbt_fill_depressions_wang_and_liu(
dem = paste0(my_directory, "/dem_breached.tif"),
output = paste0(my_directory, "/dem_filled_breached.tif"),
)
#Read the smoothed dem
dem = rast("dem_filled_breached.tif")
#Map the DEM
if (ncol(dem)<1000 & nrow(dem)<1000)
{
tm_shape(dem)+
tm_raster(style = "cont", palette = "PuOr", legend.show = TRUE)+
tm_scale_bar()
} else {
tm_shape(aggregate(dem, 10), raster.downsample = TRUE)+
tm_raster(style = "cont", palette = "PuOr", legend.show = TRUE)+
tm_scale_bar()
}
# Create flow accumulation and pointer grids (flow direction)
#Generate the flow accumulation map. Make sure to use the filled DEM "dem_filled_breached.tif"!!
wbt_d8_flow_accumulation(input = paste0(my_directory, "/dem_filled_breached.tif"), output = paste0(my_directory, "/D8FA.tif"))
#Read the produced flow accumulation file
wbt_d8_flow_accumulation_lyr = rast("D8FA.tif")
#Visualize the flow accumulation map
if (ncol(wbt_d8_flow_accumulation_lyr)<1000 & nrow(wbt_d8_flow_accumulation_lyr)<1000)
{
tm_shape(wbt_d8_flow_accumulation_lyr)+
tm_raster(style = "quantile", legend.show = TRUE)+ #Fisher or quantile classification method is used to enhance visualization for flow accumulation (distribution dominated by small values)
tm_scale_bar()
} else {
tm_shape(aggregate(wbt_d8_flow_accumulation_lyr, 10), raster.downsample = TRUE)+
tm_raster(style = "quantile", legend.show = TRUE)+ #Fisher or quantile classification method is used to enhance visualization for flow accumulation (distribution dominated by small values)
tm_scale_bar()
}
#Generate the flow direction (pointer) map
wbt_d8_pointer(dem = paste0(my_directory, "/dem_filled_breached.tif"), output = paste0(my_directory, "/D8pointer.tif"))
#Read the produced flow direction file
wbt_d8_pointer_lyr = rast("D8pointer.tif")
#Visualize the flow direction map
if (ncol(wbt_d8_pointer_lyr)<1000 & nrow(wbt_d8_pointer_lyr)<1000)
{
tm_shape(wbt_d8_pointer_lyr)+
tm_raster(style = "cont", legend.show = TRUE)+
tm_scale_bar()
} else {
tm_shape(aggregate(wbt_d8_pointer_lyr, 10, fun = modal), raster.downsample = TRUE)+ #here modal function is used for aggregating the discrete D8 flow directions.
tm_raster(style = "cont", legend.show = TRUE)+
tm_scale_bar()
}
# Set pour points
ppoints <- tribble(
~Lon, ~Lat,
-91.984427, 40.718717,
-91.384747, 40.591037
)
#Create dataframe with pour points (make sure to set up the correct spatial coordinate system)
ppointsSP <- SpatialPoints(ppoints, proj4string = CRS("+proj=longlat +datum=WGS84")) #
#Convert data frame to shapefile and write the shapefile to our data directory
shapefile(ppointsSP, filename = "pourpoints.shp", overwrite = TRUE)
#Read the shapefile
ppointsSP_gcs = st_read("pourpoints.shp")
ppointsSP_prj <- st_transform(ppointsSP_gcs, crs = "EPSG:26915")
st_write(ppointsSP_prj, "ppointsSP_prj.shp", layer_options = 'OVERWRITE=YES', update = TRUE)
wbt_extract_streams(flow_accum = paste0(my_directory, "/D8FA.tif"),
output = paste0(my_directory, "/raster_streams.tif"),
threshold = 50)
wbt_jenson_snap_pour_points(pour_pts = paste0(my_directory, "/ppointsSP_prj.shp"),
streams = paste0(my_directory, "/raster_streams.tif"),
output = paste0(my_directory, "/snappedpp.shp"),
snap_dist = 150)
#Read the produced files
streams <- raster("raster_streams.tif") #Read the generated stream network
pp = shapefile("snappedpp.shp") #Read the snapped pour points
#Visualize the pour points BEFORE being snapped to the network.
if (ncol(streams)<1000 & nrow(streams)<1000)
{
tm_shape(streams)+
tm_raster(legend.show = TRUE, palette = "Blues")+
tm_shape(ppointsSP_prj)+
tm_dots(col = "red")
} else {
tm_shape(aggregate(streams, 10, fun = max), raster.downsample = TRUE)+ #downsample function set to be MAX to improve continuity of the stream network.
tm_raster(legend.show = TRUE, palette = "Blues")+
tm_shape(ppointsSP_prj)+
tm_dots(col = "red")
}
# Read the dem
dem = rast("dem.tif")
crs(dem)
my_directory <- "/Users/jonathanbernard/Desktop/UIUC/Spring 2024/GGIS 224/GGIS224/Labs/Lab9"
setwd(my_directory)
# Read the dem
dem = rast("dem.tif")
dem_projected <- projectRaster(dem, crs = "+init=epsg:4326")
# Set working directory to location of DEM.tif file
my_directory <- "/Users/jonathanbernard/Desktop/UIUC/Spring 2024/GGIS 224/GGIS224/Labs/Lab9"
setwd(my_directory)
# Read the dem
dem = rast("dem.tif")
target_crs <- crs("+init=epsg:4326")
# Reproject the DEM
dem_projected <- projectRaster(dem, crs = target_crs)
library(tidyverse)
library(raster)
library(sf)
library(tmap)
library(stars)
library(rgl)
library(terra)
library(dplyr)
library(spData)
library(spDataLarge)
my_directory <- "/Users/jonathanbernard/Desktop/UIUC/Spring 2024/GGIS 224/GGIS224/Labs/Lab9"
setwd(my_directory)
# Read the dem
dem = rast("dem.tif")
# Convert the DEM raster to an sf object
dem_sf <- st_as_sf(as(dem, "SpatialPixelsDataFrame"))
# Set working directory to location of DEM.tif file
my_directory <- "/Users/jonathanbernard/Desktop/UIUC/Spring 2024/GGIS 224/GGIS224/Labs/Lab9"
setwd(my_directory)
# Read the dem
dem = rast("dem.tif")
# Convert the DEM SpatRaster to a RasterLayer object
dem_raster <- as(dem, "RasterLayer")
