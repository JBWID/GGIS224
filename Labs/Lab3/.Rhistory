library(sf)      # vector data package introduced in Chapter 2
library(terra)   # raster data package introduced in Chapter 2
library(dplyr)   # tidyverse package for data frame manipulation
install.packages('dplyr')
library(sf)      # vector data package introduced in Chapter 2
library(terra)   # raster data package introduced in Chapter 2
library(dplyr)   # tidyverse package for data frame manipulation
library(spData)  # spatial data package introduced in Chapter 2
install.packages('spData')
library(sf)      # vector data package introduced in Chapter 2
library(terra)   # raster data package introduced in Chapter 2
library(dplyr)   # tidyverse package for data frame manipulation
library(spData)  # spatial data package introduced in Chapter 2
library(sf)
library(dplyr)
library(terra)
library(spData)
data(us_states)
data(us_states_df)
library(sf)
library(dplyr)
library(terra)
library(spData)
data(us_states)
data(us_states_df)
#Q1
us_states_name = dplyr::select(name)
#Q1
us_states_name = dplyr::select(NAME)
#Q1
us_states_name = dplyr::select(us_states, name)
View(us_states)
#Q1
us_states_name = dplyr::select(us_states, NAME)
##Q2
pop_one = dplyr:::select(us_states, total_pop)
##Q2
pop_one = dplyr:::select(us_states, total_pop_15, total_pop_10)
print (pop_one)
pop_two = dplyr::select(us_states, contains("pop"))
print(pop_two)
pop_two = dplyr::contains(us_states, total_pop_15)
print(pop_two)
pop_two = dplyr::matches(us_states, total_pop_15)
print(pop_two)
print(pop_two)
pop_two = df%>% select (total_pop_10, total_pop_15)
#Q3
filter(us_states, REGION == "Midwest")
#Q3
print(filter(us_states, REGION == "Midwest"))
print (q3)
#Q3
q3 = filter(us_states, REGION == "Midwest")
print (q3)
print ("hello" + q3)
print (q3)
#B
west_region = filter(us_states, REGION = "West" && AREA < 250000 && total_pop_15 > 5000000)
#B
west_region = filter(us_states, REGION = "West" && AREA < 250000 && total_pop_15 > 5000000)
#B
west_region = filter(us_states, REGION = "West" && AREA < 250000)
#B
west_region = filter(us_states, REGION == "West" && AREA < 250000)
#B
west_region = filter(us_states, REGION == "West" && AREA < 250000)
rlang::last_trace()
#B
west_region = filter(us_states, REGION == "West")
#B
west_region = filter(us_states, REGION == "West")
print (west_region)
#B
west_region = filter(us_states, REGION = "West" & AREA < 250000 & total_pop_15 > 5000000)
print (west_region)
#B
west_region = filter(us_states, REGION = "West" & AREA < 250000 & total_pop_15 > 5000000)
#B
west_region = filter(us_states, REGION = "West" & AREA < 250000 & total_pop_15 > 5000000)
#B
west_region = filter(us_states, REGION = "West" & AREA < 250000 & total_pop_15 > 5e+06)
#B
west_region = filter(us_states, REGION = "West" & AREA < 250000 & total_pop_15 > 5e+06)
#B
west_region = filter(us_states, REGION = "West" & AREA < 250000 & total_pop_15 > 5e+06)
#B
west_region = filter(us_states, REGION = "West" & AREA < 250000)
#B
west_region = filter(us_states, REGION == "West" & AREA < 250000)
#B
west_region = filter(us_states, REGION == "West")
#B
west_region = filter(us_states, REGION == "West")
print (west_region)
#B
west_region = filter(us_states, REGION == "West" & area > 9)
#B
west_region = filter(us_states, REGION == "West" & AREA > 9)
#B
west_region = filter(us_states, REGION == "West" & total_pop_15 > 9)
print (west_region)
#B
west_region = filter(us_states, REGION == "West" & total_pop_15 > 5000000)
print (west_region)
#B
west_region = filter(us_states, REGION == "West" & total_pop_15 > 5000000 & AREA > 250000)
#B
west_region = filter(us_states, REGION == "West" & total_pop_15 > 5000000 & as.numeric(AREA) > 250000)
print (west_region)
print (q3)
# answer: Arizona, Colarado, California
#C
south_region = filter(us_states, REGION == "South", as.numeric(AREA) > 150000 & total_pop_15 > 7000000)
print (south_region)
print(len(south))
#Q5
south = filter(us_states, REGION == "South")
print(length(south))
print(length(south))
#Q5
south = filter(us_states, REGION == "South")
print(length(south))
west = filter(us_states, REGION == "West")
print(length(west))
northeast = filter(us_states, REGION == "Northeast")
print(length(northeast))
midwest = filter(us_states, REGION == "Midwest")
print(length(midwest))
northeast = filter(us_states, REGION == "Norteast")
print(length(northeast))
##Q1 -- answer question
us_states_name = dplyr::select(us_states, NAME)
clear
##Q1 -- answer question
us_states_name = dplyr::select(us_states, NAME)
print (us_states_name)
pop_one = dplyr::select(us_states, total_pop_10, total_pop_15)
pop_two = dplyr::contains(us_states, contains("pop"))
##Q2
pop_one = dplyr::select(us_states, total_pop_10, total_pop_15)
pop_two = dplyr::contains(us_states, contains("pop"))
pop_three = dplyr::matches(us_states, matches("^total_pop_"))
pop_two = dplyr::select(us_states, contains("pop"))
pop_three = dplyr::select(us_states, matches("^total_pop_"))
pop_one = dplyr::select(us_states, total_pop_10, total_pop_15)
print(pop_one)
pop_two = dplyr::select(us_states, contains("pop"))
print(pop_two)
pop_three = dplyr::select(us_states, matches("^total_pop_"))
print(pop_three)
#Q4
total = sum(us_states%total_pop_15)
#Q4
total = sum(us_states$total_pop_15, na.rm = TRUE)
#Q4
total = sum(us_states$total_pop_15)
print(total)
minimum = min(us_states$total_pop_15)
print(minimum)
print(maximum)
maximum = max(us_states$total_pop_15)
print(maximum)
maximum = max(us_states$total_pop_15)
print(maximum)
print(total)
#Q4
total = sum(us_states$total_pop_15)
print(total)
minimum = min(us_states$total_pop_15)
print(minimum)
maximum = max(us_states$total_pop_15)
print(maximum)
#Q5
south = filter(us_states, REGION == "South")
print(length(south))
west = filter(us_states, REGION == "West")
print(length(west))
#Q5
south = filter(us_states, REGION == "South")
print(nrow(south))
south = filter(us_states, REGION == "South")
print(nrow(south))
west = filter(us_states, REGION == "West")
print(nrow(west))
northeast = filter(us_states, REGION == "Norteast")
print(nrow(northeast))
midwest = filter(us_states, REGION == "Midwest")
print(nrow(midwest))
#Q5
south = filter(us_states, REGION == "South")
print(nrow(south))
west = filter(us_states, REGION == "West")
print(nrow(west))
northeast = filter(us_states, REGION == "Norteast")
print(nrow(northeast))
midwest = filter(us_states, REGION == "Midwest")
print(nrow(midwest))
##Q6
south_pop_total = sum(us_states$total_pop_15[us_states$REGION == "South"])
print(south_pop_total)
south_pop_min = min((us_states$total_pop_15[us_states$REGION == "South"]))
print(south_pop_min)
south_pop_max = max(us_states$total_pop_15[us_states$REGION == "South"])
print(south_pop_max)
west_pop_total = sum(us_states$total_pop_15[us_states$REGION == "West"])
print(west_pop_total) #
west_pop_min = min(us_states$total_pop_15[us_states$REGION == "West"])
print(west_pop_min) #
west_pop_max = max(us_states$total_pop_15[us_states$REGION == "West"])
print(west_pop_max) #
west_pop_total = sum(us_states$total_pop_15[us_states$REGION == "Norteast"])
print(west_pop_total) # 38421464
west_pop_min = min(us_states$total_pop_15[us_states$REGION == "Norteast"])
print(west_pop_min) # 579679
west_pop_max = max(us_states$total_pop_15[us_states$REGION == "Norteast"])
print(west_pop_max) # 72264052
northeast_pop_total = sum(us_states$total_pop_15[us_states$REGION == "Norteast"])
print(northeast_pop_total)
northeast_pop_min = min(us_states$total_pop_15[us_states$REGION == "Norteast"])
print(northeast_pop_min)
northeast_pop_max = max(us_states$total_pop_15[us_states$REGION == "Norteast"])
print(northeast_pop_max)
midwest_pop_total = sum(us_states$total_pop_15[us_states$REGION == "Midwest"])
print(midwest_pop_total)
midwest_pop_min = min(us_states$total_pop_15[us_states$REGION == "Midwest"])
print(midwest_pop_min)
midwest_pop_max = max(us_states$total_pop_15[us_states$REGION == "Midwest"])
print(midwest_pop_max)
##Q7
us_states_stats = full_join(us_states, us_states_df)
##Q7
us_states_stats = cross_join(us_states, us_states_df)
View(us_states_stats)
data(us_states_df)
View(us_states_stats)
View(us_states_name)
View(us_states)
View(us_states)
View(us_states_stats)
View(us_states_name)
data(us_states_df)
force(us_states_df)
View(us_states_stats)
View(us_states_name)
View(us_states_df)
##Q7
us_states_stats = left_join(us_states, us_states_df)
View(us_states_stats)
##Q7
us_states_stats = left_join(us_states, us_states_df by = join_by(state, name))
##Q7
left_join(us_states, us_states_df, by = c("state" = "NAME"))
##Q7
left_join(us_states, us_states_df, by = c("state" = "NAME"))
##Q7
left_join(us_states, us_states_df, by = c("NAME" = "state"))
##Q7
us_states_stat = left_join(us_states, us_states_df, by = c("NAME" = "state"))
View(us_states_stat)
##Q8
extra_rows = anti_join(us_states_df, us_states, by = c("state" = "NAME"))
extra_rows
View(us_states_stats)
View(us_states_stat)
##Q9
us_states_df = us_states_df %>%mutate(poverty_change = poverty_level_15 - poverty_level_10)
us_states_df <- us_states_df %>%mutate(poverty_change = poverty_level_15 - poverty_level_10)
plot(us_states_df["poverty_change"], main = "Change in Poverty Level from 2010 to 2015")
##Q9
us_states_df <- us_states_df %>%mutate(poverty_change = poverty_level_15 - poverty_level_10)
plot(us_states_df["poverty_change"], main = "Change in Poverty Level from 2010 to 2015")
##Q9
us_states_df <- us_states_df %>%mutate(poverty_change = poverty_level_15 - poverty_level_10)
plot(us_states_df["poverty_change"], main = "Change in Poverty Level from 2010 to 2015")
##Q10
largest_increase = max(us_states_df$poverty_change)
print(largest_increase)
us_states_stats_new = us_states_df %>% mutate(poverty_change = poverty_level_15 - poverty_level_10)
##Q9
us_states_stats_new = us_states_df %>% mutate(poverty_change = poverty_level_15 - poverty_level_10)
library(sf)
library(dplyr)
library(terra)
library(spData)
data(us_states)
data(us_states_df)
us_states_stats_new = us_states_df %>% mutate(poverty_change = poverty_level_15 - poverty_level_10)
plot(us_states_stats_new[["poverty_change"]], main = "Change in Poverty Level from 2010 to 2015")
plot(us_states_stats_new[["poverty_change"]])
##Q9
us_states_stats_new = us_states_df %>% mutate(poverty_change = poverty_level_15 - poverty_level_10)
plot(us_states_stats_new[["poverty_change"]], main = "Change in Poverty Level from 2010 to 2015")
##Q10 - continue this
largest_increase = aggregate(poverty_change ~ REGION, FUN = sum, data = us_states_stat, na.rm = TRUE)
##Q7
us_states_stat = left_join(us_states, us_states_df, by = c("NAME" = "state"))
##Q10 - continue this
largest_increase = aggregate(poverty_change ~ REGION, FUN = sum, data = us_states_stat, na.rm = TRUE)
View(us_states_stat)
View(us_states_df)
View(us_states_stat)
View(us_states_stats_new)
##Q7
us_states_stat = left_join(us_states, us_states_df, by = c("NAME" = "state"))
##Q7
us_states_stat = left_join(us_states, us_states_df, by = c("NAME" = "state"))
us_states_stat
View(us_states_stat)
##Q10 - continue this
largest_increase = aggregate(poverty_change ~ REGION, FUN = sum, data = us_states_stat, na.rm = TRUE)
View(us_states_stat)
##Q9
us_states_stats_new = us_states_stat %>% mutate(poverty_change = poverty_level_15 - poverty_level_10)
plot(us_states_stats_new[["poverty_change"]], main = "Change in Poverty Level from 2010 to 2015")
View(us_states_stat)
View(us_states_stats_new)
##Q10 - continue this
largest_increase = aggregate(poverty_change ~ REGION, FUN = sum, data = us_states_stat_new, na.rm = TRUE)
##Q10 - continue this
largest_increase = aggregate(poverty_change ~ REGION, FUN = sum, data = us_states_stats_new, na.rm = TRUE)
View(us_states_stats_new)
max_increase = largest_increase[which.max(largest_increase$poverty_change), ]
print(max_increase)
View(largest_increase)
library(sf)
library(dplyr)
library(terra)
library(spData)
data(us_states)
data(us_states_df)
##Q1
us_states_name = dplyr::select(us_states, NAME)
print (us_states_name)
# What is the class of the new object and what makes it geographic?
# The class of the object is a sf object, its geographic due to its
# multiploygon geometry type, 2 dimensional spatial data with both x and w coordinates
# and the presence of the bounding box which outlites the spatial extent of the collection
# over a specific geographic area
##Q2
pop_one = dplyr::select(us_states, total_pop_10, total_pop_15)
print(pop_one)
pop_two = dplyr::select(us_states, contains("pop"))
print(pop_two)
pop_three = dplyr::select(us_states, matches("^total_pop_"))
print(pop_three)
##Q3
#A.
midwest_region = filter(us_states, REGION == "Midwest")
print (q3)
library(sf)
library(dplyr)
library(terra)
library(spData)
data(us_states)
data(us_states_df)
##Q1
us_states_name = dplyr::select(us_states, NAME)
print (us_states_name)
# What is the class of the new object and what makes it geographic?
# The class of the object is a sf object, its geographic due to its
# multiploygon geometry type, 2 dimensional spatial data with both x and w coordinates
# and the presence of the bounding box which outlites the spatial extent of the collection
# over a specific geographic area
##Q2
pop_one = dplyr::select(us_states, total_pop_10, total_pop_15)
print(pop_one)
pop_two = dplyr::select(us_states, contains("pop"))
print(pop_two)
pop_three = dplyr::select(us_states, matches("^total_pop_"))
print(pop_three)
##Q3
#A.
midwest_region = filter(us_states, REGION == "Midwest")
print (q3)
print (midwest_region)
##Q9
us_states_stats_new = us_states_stat %>% mutate(poverty_change = poverty_level_15 - poverty_level_10)
##Q7
us_states_stat = left_join(us_states, us_states_df, by = c("NAME" = "state"))
##Q9
us_states_stats_new = us_states_stat %>% mutate(poverty_change = poverty_level_15 - poverty_level_10)
plot(us_states_stats_new["poverty_change"], main = "Change in Poverty Level from 2010 to 2015")
setwd(r"(/Users/jonathanbernard/Desktop/UIUC/Spring 2024/GGIS 224/Labs/Lab3)")
library(sf)
library(spData)
library(tidyverse)
library(sf)      # vector data package introduced in Chapter 2
library(terra)   # raster data package introduced in Chapter 2
library(dplyr)   # tidyverse package for data frame manipulation
library(spData)  # spatial data package introduced in Chapter 2
methods(class = "sf") # methods for sf objects, first 12 shown
class(world)
dim(world)
class(world_df)
world_df = st_drop_geometry(world)
class(world_df)
library(sf)      # vector data package introduced in Chapter 2
library(terra)   # raster data package introduced in Chapter 2
library(dplyr)   # tidyverse package for data frame manipulation
library(spData)  # spatial data package introduced in Chapter 2
methods(class = "sf") # methods for sf objects, first 12 shown
class(world)
dim(world)
world_df = st_drop_geometry(world)
class(world_df)
ncol(world_df)
world[1:6, ]    # subset rows by position
world[, 1:3]    # subset columns by position
world[1:6, 1:3] # subset rows and columns by position
world[, c("name_long", "pop")] # columns by name
world[, c(T, T, F, F, F, F, F, T, T, F, F)] # by logical indices
world[, 888] # an index representing a non-existent column
library(sf)      # vector data package introduced in Chapter 2
library(terra)   # raster data package introduced in Chapter 2
library(dplyr)   # tidyverse package for data frame manipulation
library(spData)  # spatial data package introduced in Chapter 2
methods(class = "sf") # methods for sf objects, first 12 shown
class(world)
dim(world)
world_df = st_drop_geometry(world)
class(world_df)
ncol(world_df)
elev = rast(nrows = 6, ncols = 6,
xmin = -1.5, xmax = 1.5, ymin = -1.5, ymax = 1.5,
vals = 1:36)
grain_order = c("clay", "silt", "sand")
grain_char = sample(grain_order, 36, replace = TRUE)
grain_fact = factor(grain_char, levels = grain_order)
grain = rast(nrows = 6, ncols = 6,
xmin = -1.5, xmax = 1.5, ymin = -1.5, ymax = 1.5,
vals = grain_fact)
grain2 = grain # do not overwrite the original data
levels(grain2) = data.frame(value = c(0, 1, 2), wetness = c("wet", "moist", "dry"))
levels(grain2)
# row 1, column 1
elev[1, 1]
# cell ID 1
elev[1]
elev[1, 1] = 0
elev[]
elev[1, c(1, 2)] = 0
two_layers = c(grain, elev)
two_layers[1] = cbind(c(1), c(4))
two_layers[]
two_layers[]
global(elev, sd)
freq(grain)
hist(elev)
library(sf)      # vector data package introduced in Chapter 2
library(terra)   # raster data package introduced in Chapter 2
library(dplyr)   # tidyverse package for data frame manipulation
library(spData)  # spatial data package introduced in Chapter 2
elev = rast(nrows = 6, ncols = 6,
xmin = -1.5, xmax = 1.5, ymin = -1.5, ymax = 1.5,
vals = 1:36)
# Calculate the standard deviation of 'elev'
elev_std_dev = global(elev, fun = sd, na.rm = TRUE)
# Print the standard deviation
print(elev_std_dev)
