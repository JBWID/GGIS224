#then we convert the center points into circles with a radius of 1 and can plot them
a_circle = st_buffer(a, dist = 1)
b_circle = st_buffer(b, dist = 1)
plot(a_circle)
plot(b_circle, add=TRUE)
#Enter your code chunk that solves this question. Please leave comments as in detail as possible to show your logical development.
# create the 2 points based on the requirements
point1 = st_sfc(st_point(c(0, 0)))
point2 = st_sfc(st_point(c(7, 1)))
# creating circles of the 2 points
circle1 = st_buffer(point1, dist = 5)
circle2 = st_buffer(point2, dist = 6)
# combining the 2 circles
combined_circles <- st_union(circle1, circle2)
# finding the bounding box
bbox <- st_bbox(combined_circles)
# generate random points
set.seed(2024)
points <- st_sample(x = st_as_sfc(bbox), size = 40, type = "random")
# Calculate intersections
intersects_circle1 <- st_intersects(points, circle1)
intersects_circle2 <- st_intersects(points, circle2)
# Logical vectors for intersection with circle1 and circle2
in_circle1 <- lengths(intersects_circle1) > 0
in_circle2 <- lengths(intersects_circle2) > 0
# Logical vector for points in both circles
in_both_circles <- in_circle1 & in_circle2
# Correct subsetting of points
points_in_both_intersects <- points[in_both_circles, ]
install.packages("spDataLarge", repos = "https://nowosad.github.io/drat/", type = "source")
install.packages("spDataLarge", repos = "https://nowosad.github.io/drat/", type = "source")
install.packages("rmapshaper")
install.packages("rmapshaper")
#Enter your code chunk that solves this question. Please leave comments as in detail as possible to show your logical development.
# create the 2 points based on the requirements
point1 = st_sfc(st_point(c(0, 0)))
point2 = st_sfc(st_point(c(7, 1)))
# creating circles of the 2 points
circle1 = st_buffer(point1, dist = 5)
circle2 = st_buffer(point2, dist = 6)
# combining the 2 circles
combined_circles <- st_union(circle1, circle2)
# finding the bounding box
bbox <- st_bbox(combined_circles)
# generate random points
set.seed(2024)
points <- st_sample(x = st_as_sfc(bbox), size = 40, type = "random")
# Calculate intersections
intersects_circle1 <- st_intersects(points, circle1)
intersects_circle2 <- st_intersects(points, circle2)
# Logical vectors for intersection with circle1 and circle2
in_circle1 <- lengths(intersects_circle1) > 0
in_circle2 <- lengths(intersects_circle2) > 0
# Logical vector for points in both circles
in_both_circles <- in_circle1 & in_circle2
# Correct subsetting of points
points_in_both_intersects <- points[in_both_circles, ]
#Enter your code chunk that solves this question. Please leave comments as in detail as possible to show your logical development.
# create the 2 points based on the requirements
point1 = st_sfc(st_point(c(0, 0)))
point2 = st_sfc(st_point(c(7, 1)))
# creating circles of the 2 points
circle1 = st_buffer(point1, dist = 5)
circle2 = st_buffer(point2, dist = 6)
# combining the 2 circles
combined_circles <- st_union(circle1, circle2)
# finding the bounding box
bbox <- st_bbox(combined_circles)
# generate random points
set.seed(2024)
points <- st_sample(x = st_as_sfc(bbox), size = 40, type = "random")
points_within_both_intersects <- points[st_intersects(points, circle1) & st_intersects(points, circle2), ]
#Enter your code chunk that solves this question. Please leave comments as in detail as possible to show your logical development.
# create the 2 points based on the requirements
point1 = st_sfc(st_point(c(0, 0)))
point2 = st_sfc(st_point(c(7, 1)))
# creating circles of the 2 points
circle1 = st_buffer(point1, dist = 5)
circle2 = st_buffer(point2, dist = 6)
# combining the 2 circles
combined_circles <- st_union(circle1, circle2)
# finding the bounding box
bbox <- st_bbox(combined_circles)
# generate random points
set.seed(2024)
points <- st_sample(x = st_as_sfc(bbox), size = 40, type = "random")
# Check which points are in circle1
in_circle1 <- st_intersects(points, circle1)
# Check which points are in circle2
in_circle2 <- st_intersects(points, circle2)
# Convert the list output of st_intersects to a logical vector
# A point is within both circles if it is in circle1 AND in circle2
points_in_both <- lengths(in_circle1) > 0 & lengths(in_circle2) > 0
# Subset points that are within both circles
points_within_both_intersects <- points[points_in_both, ]
#Enter your code chunk that solves this question. Please leave comments as in detail as possible to show your logical development.
# create the 2 points based on the requirements
point1 = st_sfc(st_point(c(0, 0)))
point2 = st_sfc(st_point(c(7, 1)))
# creating circles of the 2 points
circle1 = st_buffer(point1, dist = 5)
circle2 = st_buffer(point2, dist = 6)
# combining the 2 circles
combined_circles <- st_union(circle1, circle2)
# finding the bounding box
bbox <- st_bbox(combined_circles)
# generate random points
set.seed(2024)
points <- st_sample(x = st_as_sfc(bbox), size = 40, type = "random")
# Use st_intersects to find which points intersect with each circle and create logical vectors
intersects_circle1 <- st_intersects(points, circle1)
intersects_circle2 <- st_intersects(points, circle2)
# Since st_intersects returns a sparse matrix, we need to process it differently
# Create a logical vector where TRUE means a point is in both circles
points_in_both <- lengths(intersects_circle1) > 0 & lengths(intersects_circle2) > 0
# The error correction: Ensure we're using the correct subsetting method for sf objects
# Convert logical vector to indices
indices_in_both <- which(points_in_both)
# Now subset the sf object with these indices
points_within_both_intersects <- points[indices_in_both, ]
#Enter your code chunk that explores this question. Please leave comments as in detail as possible to show your logical development.
par(mfrow = c(1, 5)) # to layout maps beside each other
plot(st_geometry(nz), main = "Original", col = "white") #start with your basemap
# Simplify with dTolerance = 100
nz_st_simple_1 <- st_simplify(nz, dTolerance = 100) #use st_simplify to simply the NZ borders
plot(st_geometry(nz_st_simple_1), main = "dTolerance = 100", col = "red") #map those simplified borders
nrow(nz_st_simple_1) # 16 rows
#You can either add and plot multiple st_simplify objects with different dTolerance values and colors for comparison or continue to alter the one nz_st_simple_1 object.
# tolerance value = 1000
nz_st_simple_2 <- st_simplify(nz, dTolerance = 1000)  #use st_simplify to simply the NZ borders
plot(st_geometry(nz_st_simple_2), main = "dTolerance = 1000", col = "blue") #map those simplified borders
nrow(nz_st_simple_2) # 16 rows
# tolerance value = 10000
nz_st_simple_3 <- st_simplify(nz, dTolerance = 10000) #use st_simplify to simply the NZ borders
plot(st_geometry(nz_st_simple_3), main = "dTolerance = 10000", col = "green") #map those simplified borders
nrow(nz_st_simple_3) #16 rows
# tolerance value = 100000
nz_st_simple_4 <- st_simplify(nz, dTolerance = 100000) #use st_simplify to simply the NZ borders
plot(st_geometry(nz_st_simple_4), main = "dTolerance = 100000", col = "orange") #map those simplified borders
nrow(nz_st_simple_4) #16 rows
par(mfrow = c(1, 1))
#Enter your code chunk that explores this question. Please leave comments as in detail as possible to show your logical development.
# step 1: filter canterbury from nz
canterbury <- nz %>%
filter(Name == "Canterbury")
# step 2: double check that the coordinate system is in meters
st_crs(canterbury) # already in meters
# step 3: set a 100km buffer surrounding Canterbury
canterbury_buffer <- st_buffer(canterbury, dist = 100000)
# step 4: subset how many nz high points are within the buffer
intersects <- st_intersects(nz_height, canterbury_buffer, sparse = FALSE)
nz_height_within_buffer <- nz_height[intersects, ]
# step 5: map it
plot(st_geometry(canterbury_buffer), col = 'yellow', main = "Canterbury Buffer", border = NA) # plotting the buffer
plot(st_geometry(canterbury), border = 'black', add = TRUE) # plot the base Canterbury region
plot(st_geometry(nz_height_within_buffer), col = 'red', add = TRUE) # plotting the high points
# number of points
print(nrow(nz_height_within_buffer)) # 95 points
#Enter your code chunk that solves this question. Please leave comments as in detail as possible to show your logical development.
# combining all regions into one feature using st_union
nz_combined <- st_union(nz)
# calculating the centroid of the combined feature
nz_centroid <- st_centroid(nz_combined)
# plotting the map to visualize the centroid on the map of New Zealand
plot(st_geometry(nz), col = 'lightblue', main = "Centroid of New Zealand")
plot(st_geometry(nz_centroid), col = 'red', add = TRUE, pch = 20, cex = 3)
# calculating the centroid of Canterbury
canterbury_centroid <- st_centroid(canterbury)
# combining all regions into one feature using st_union
nz_combined <- st_union(nz)
# calculating the centroid of the combined feature
nz_centroid <- st_centroid(nz_combined)
# find the distance between the centroid of Canterbury and the centroid of New Zealand
distance <- st_distance(canterbury_centroid, nz_centroid)
# display the distance / result
print(distance)
#First we create 2 points, where 0,1 and 1,1 are its location. These are the center points of our circles
a = st_sfc(st_point(c(0, 1)))
b = st_sfc(st_point(c(1, 1)))
#then we convert the center points into circles with a radius of 1 and can plot them
a_circle = st_buffer(a, dist = 1)
b_circle = st_buffer(b, dist = 1)
plot(a_circle)
plot(b_circle, add=TRUE)
#Enter your code chunk that solves this question. Please leave comments as in detail as possible to show your logical development.
# create the 2 points based on the requirements
point1 = st_sfc(st_point(c(0, 0)))
point2 = st_sfc(st_point(c(7, 1)))
# creating circles of the 2 points
circle1 = st_buffer(point1, dist = 5)
circle2 = st_buffer(point2, dist = 6)
# combining the 2 circles
combined_circles <- st_union(circle1, circle2)
# finding the bounding box
bbox <- st_bbox(combined_circles)
# generate random points
set.seed(2024)
points <- st_sample(x = st_as_sfc(bbox), size = 40, type = "random")
# Use st_intersects to find which points intersect with each circle and create logical vectors
intersects_circle1 <- st_intersects(points, circle1)
intersects_circle2 <- st_intersects(points, circle2)
# Since st_intersects returns a sparse matrix, we need to process it differently
# Create a logical vector where TRUE means a point is in both circles
points_in_both <- lengths(intersects_circle1) > 0 & lengths(intersects_circle2) > 0
# The error correction: Ensure we're using the correct subsetting method for sf objects
# Convert logical vector to indices
indices_in_both <- which(points_in_both)
# Now subset the sf object with these indices
points_within_both_intersects <- points[indices_in_both, ]
library(sf)
#Enter your code chunk that solves this question. Please leave comments as in detail as possible to show your logical development.
point1 <- st_sfc(st_point(c(0, 0)))
point2 <- st_sfc(st_point(c(7, 1)))
# creating circles of the 2 points
circle1 <- st_buffer(point1, dist = 5)
circle2 <- st_buffer(point2, dist = 6)
# combining the 2 circles
combined_circles <- st_union(circle1, circle2)
# finding the bounding box
bbox <- st_bbox(combined_circles)
# generate random points
set.seed(2024)
points <- st_sample(x = st_as_sfc(bbox), size = 40, type = "random")
# Use st_intersects to find which points intersect with each circle
intersects_circle1 <- st_intersects(points, circle1)
intersects_circle2 <- st_intersects(points, circle2)
# Logical vector where TRUE means a point is in both circles
points_in_both <- lengths(intersects_circle1) > 0 & lengths(intersects_circle2) > 0
indices_in_both <- which(points_in_both)
# Subset the points using indices for method 1 (st_intersects)
points_within_both_intersects <- points[indices_in_both, ]
#Enter your code chunk that solves this question. Please leave comments as in detail as possible to show your logical development.
point1 <- st_sfc(st_point(c(0, 0)))
point2 <- st_sfc(st_point(c(7, 1)))
# creating circles of the 2 points
circle1 <- st_buffer(point1, dist = 5)
circle2 <- st_buffer(point2, dist = 6)
# combining the 2 circles
combined_circles <- st_union(circle1, circle2)
# finding the bounding box
bbox <- st_bbox(combined_circles)
# generate random points
set.seed(2024)
points <- st_sample(x = st_as_sfc(bbox), size = 40, type = "random")
# Use st_intersects to find which points intersect with each circle
intersects_circle1 <- st_intersects(points, circle1)
intersects_circle2 <- st_intersects(points, circle2)
# Logical vector where TRUE means a point is in both circles
points_in_both <- lengths(intersects_circle1) > 0 & lengths(intersects_circle2) > 0
indices_in_both <- which(points_in_both)
# Now, here's where you introduce the dplyr approach:
# Convert sf object to a dataframe that includes an index column, and then filter using indices_in_both
points_df <- st_as_sf(points) %>%
mutate(index = row_number()) %>%
filter(index %in% indices_in_both)
# If you need to convert back to sf object for spatial operations (points_df is already an sf object due to st_as_sf)
# points_within_both_intersects <- st_as_sf(points_df)
# Proceed to plotting
plot(st_geometry(combined_circles), col = NA, main = "Points Within Two Circles") # Plot combined circles without fill
plot(st_geometry(circle1), border = "blue", add = TRUE) # Plot first circle
plot(st_geometry(circle2), border = "red", add = TRUE) # Plot second circle
plot(st_geometry(points), col = "black", pch = 20, add = TRUE) # Plot all random points
plot(st_geometry(points_df), col = "green", pch = 20, add = TRUE) # Highlight points within both circles using dplyr filtered points
#Enter your code chunk that solves this question. Please leave comments as in detail as possible to show your logical development.
# create 2 points based on the parameters given
point1 <- st_sfc(st_point(c(0, 0)))
point2 <- st_sfc(st_point(c(7, 1)))
# creating circles of the 2 points
circle1 <- st_buffer(point1, dist = 5)
circle2 <- st_buffer(point2, dist = 6)
# combining the 2 circles
combined_circles <- st_union(circle1, circle2)
# finding the bounding box
bbox <- st_bbox(combined_circles)
# generate random points
set.seed(2024)
points <- st_sample(x = st_as_sfc(bbox), size = 40, type = "random")
# use st_intersects to find which points intersect with each circle
intersects_circle1 <- st_intersects(points, circle1)
intersects_circle2 <- st_intersects(points, circle2)
points_in_both <- lengths(intersects_circle1) > 0 & lengths(intersects_circle2) > 0
indices_in_both <- which(points_in_both)
points_df <- st_as_sf(points) %>%
mutate(index = row_number()) %>%
filter(index %in% indices_in_both)
# Proceed to plotting
plot(st_geometry(combined_circles), main = "Points Within Two Circles") # Plot combined circles without fill
plot(st_geometry(circle1), border = "blue", add = TRUE) # Plot first circle
plot(st_geometry(circle2), border = "red", add = TRUE) # Plot second circle
plot(st_geometry(points), col = "black", pch = 20, add = TRUE) # Plot all random points
plot(st_geometry(points_df), col = "green", pch = 20, add = TRUE) # Highlight points within both circles using dplyr filtered points
#Enter your code chunk that solves this question. Please leave comments as in detail as possible to show your logical development.
# create 2 points based on the parameters given
point1 <- st_sfc(st_point(c(0, 0)))
point2 <- st_sfc(st_point(c(7, 1)))
# creating circles of the 2 points
circle1 <- st_buffer(point1, dist = 5)
circle2 <- st_buffer(point2, dist = 6)
# combining the 2 circles
combined_circles <- st_union(circle1, circle2)
# finding the bounding box
bbox <- st_bbox(combined_circles)
# generate random points
set.seed(2024)
points <- st_sample(x = st_as_sfc(bbox), size = 40, type = "random")
# use st_intersects to find which points intersect with each circle
intersects_circle1 <- st_intersects(points, circle1)
intersects_circle2 <- st_intersects(points, circle2)
points_in_both <- lengths(intersects_circle1) > 0 & lengths(intersects_circle2) > 0
indices_in_both <- which(points_in_both)
points_df <- st_as_sf(points) %>%
mutate(index = row_number()) %>%
filter(index %in% indices_in_both)
# Proceed to plotting
plot(st_geometry(combined_circles)) # Plot combined circles without fill
plot(st_geometry(circle1), border = "blue", add = TRUE) # Plot first circle
plot(st_geometry(circle2), border = "red", add = TRUE) # Plot second circle
plot(st_geometry(points), col = "black", pch = 20, add = TRUE) # Plot all random points
plot(st_geometry(points_df), col = "green", pch = 20, add = TRUE) # Highlight points within both circles using dplyr filtered points
#Enter your code chunk that solves this question. Please leave comments as in detail as possible to show your logical development.
# create 2 points based on the parameters given
point1 <- st_sfc(st_point(c(0, 0)))
point2 <- st_sfc(st_point(c(7, 1)))
# creating circles of the 2 points
circle1 <- st_buffer(point1, dist = 5)
circle2 <- st_buffer(point2, dist = 6)
# combining the 2 circles
combined_circles <- st_union(circle1, circle2)
# finding the bounding box
bbox <- st_bbox(combined_circles)
# generate random points
set.seed(2024)
points <- st_sample(x = st_as_sfc(bbox), size = 40, type = "random")
# use st_intersects to find which points intersect with each circle
intersects_circle1 <- st_intersects(points, circle1)
intersects_circle2 <- st_intersects(points, circle2)
points_in_both <- lengths(intersects_circle1) > 0 & lengths(intersects_circle2) > 0
indices_in_both <- which(points_in_both)
points_df <- st_as_sf(points) %>%
mutate(index = row_number()) %>%
filter(index %in% indices_in_both)
# Proceed to plotting
plot(st_geometry(combined_circles)) # plotting combined circles
plot(st_geometry(circle1), border = "blue", add = TRUE) # plotting first circle
plot(st_geometry(circle2), border = "red", add = TRUE) # plotting second circle
plot(st_geometry(points), col = "black", add = TRUE) # plotting random points
plot(st_geometry(points_df), col = "green", add = TRUE) # highlighting points that lies in the intersection
#Enter your code chunk that solves this question. Please leave comments as in detail as possible to show your logical development.
# create 2 points based on the parameters given
point1 <- st_sfc(st_point(c(0, 0)))
point2 <- st_sfc(st_point(c(7, 1)))
# creating circles of the 2 points
circle1 <- st_buffer(point1, dist = 5)
circle2 <- st_buffer(point2, dist = 6)
# combining the 2 circles
combined_circles <- st_union(circle1, circle2)
# finding the bounding box
bbox <- st_bbox(combined_circles)
# generate random points
set.seed(2024)
points <- st_sample(x = st_as_sfc(bbox), size = 40, type = "random")
# use st_intersects to find which points intersect with each circle
intersects_circle1 <- st_intersects(points, circle1)
intersects_circle2 <- st_intersects(points, circle2)
points_in_both <- lengths(intersects_circle1) > 0 & lengths(intersects_circle2) > 0
indices_in_both <- which(points_in_both)
points_df <- st_as_sf(points) %>%
mutate(index = row_number()) %>%
filter(index %in% indices_in_both)
# Proceed to plotting
plot(st_geometry(combined_circles)) # plotting combined circles
plot(st_geometry(circle1), border = "blue", add = TRUE) # plotting first circle
plot(st_geometry(circle2), border = "red", add = TRUE) # plotting second circle
plot(st_geometry(points), col = "black", pch = 20, add = TRUE) # plotting random points
plot(st_geometry(points_df), col = "green", pch = 20, add = TRUE) # highlighting points that lies in the intersection
#Enter your code chunk that solves this question. Please leave comments as in detail as possible to show your logical development.
# create 2 points based on the parameters given
point1 <- st_sfc(st_point(c(0, 0)))
point2 <- st_sfc(st_point(c(7, 1)))
# creating circles of the 2 points
circle1 <- st_buffer(point1, dist = 5)
circle2 <- st_buffer(point2, dist = 6)
# combining the 2 circles
combined_circles <- st_union(circle1, circle2)
# finding the bounding box
bbox <- st_bbox(combined_circles)
# generate random points
set.seed(2024)
points <- st_sample(x = st_as_sfc(bbox), size = 40, type = "random")
# use st_intersects to find which points intersect with each circle
intersects_circle1 <- st_intersects(points, circle1)
intersects_circle2 <- st_intersects(points, circle2)
points_in_both <- lengths(intersects_circle1) > 0 & lengths(intersects_circle2) > 0
indices_in_both <- which(points_in_both)
points_df <- st_as_sf(points) %>%
mutate(index = row_number()) %>%
filter(index %in% indices_in_both)
# Proceed to plotting
plot(st_geometry(combined_circles)) # plotting combined circles
plot(st_geometry(circle1), border = "blue", add = TRUE) # plotting first circle
plot(st_geometry(circle2), border = "red", add = TRUE) # plotting second circle
plot(st_geometry(points), col = "black", pch = 20, add = TRUE) # plotting random points as circles filled in black
plot(st_geometry(points_df), col = "green", pch = 20, add = TRUE) # highlighting points in green that lies in the intersection
#Enter your code chunk that solves this question. Please leave comments as in detail as possible to show your logical development.
# step 1: First make us_states geometry compatible with st_length - it is currently a POLYGON.
us_states_lines <- st_boundary(us_states)
# step 2: Calculate state line length as a new object.
state_lengths <- st_length(us_states_lines)
# step 3: Assign state lengths to a new attribute in us_states.
us_states$border_length <- state_lengths
# step 4: Order by border length so you can see which state has the longest and the shortest. border lengths.
ordered_states <- us_states %>%
arrange(border_length) %>%
select(state_name, border_length)
View(us_states)
#Enter your code chunk that solves this question. Please leave comments as in detail as possible to show your logical development.
# step 1: First make us_states geometry compatible with st_length - it is currently a POLYGON.
us_states_lines <- st_boundary(us_states)
# step 2: Calculate state line length as a new object.
state_lengths <- st_length(us_states_lines)
# step 3: Assign state lengths to a new attribute in us_states.
us_states$border_length <- state_lengths
# step 4: Order by border length so you can see which state has the longest and the shortest. border lengths.
ordered_states <- us_states %>%
arrange(border_length) %>%
select(NAME, border_length)
# finding longest and shortest border
shortest <- head(ordered_states, 1)
longest <- tail(ordered_states, 1)
# printing the values
print(paste("shortest border state:", shortest$state_name))
print(paste("longest border state:", longest$state_name))
View(us_states)
#Enter your code chunk that solves this question. Please leave comments as in detail as possible to show your logical development.
# step 1: First make us_states geometry compatible with st_length - it is currently a POLYGON.
us_states_lines <- st_boundary(us_states)
# step 2: Calculate state line length as a new object.
state_lengths <- st_length(us_states_lines)
# step 3: Assign state lengths to a new attribute in us_states.
us_states$border_length <- state_lengths
# step 4: Order by border length so you can see which state has the longest and the shortest border lengths.
ordered_states <- us_states %>%
arrange(border_length) %>%
select(NAME, border_length)
# finding longest and shortest border
shortest <- head(ordered_states, 1)
longest <- tail(ordered_states, 1)
# printing the values using the correct column name for state names
print(paste("Shortest border state:", shortest$NAME, "Length:", shortest$border_length, "meters"))
print(paste("Longest border state:", longest$NAME, "Length:", longest$border_length, "meters"))
#Enter your code chunk that solves this question. Please leave comments as in detail as possible to show your logical development.
# step 1: First make us_states geometry compatible with st_length - it is currently a POLYGON.
us_states_lines <- st_boundary(us_states)
# step 2: Calculate state line length as a new object.
state_lengths <- st_length(us_states_lines)
# step 3: Assign state lengths to a new attribute in us_states.
us_states$border_length <- state_lengths
# step 4: Order by border length so you can see which state has the longest and the shortest border lengths.
ordered_states <- us_states %>%
arrange(border_length) %>%
select(NAME, border_length)
# finding longest and shortest border
shortest <- head(ordered_states, 1)
longest <- tail(ordered_states, 1)
# printing the values using the correct column name for state names
print(paste("Shortest border state:", shortest$NAME))
print(paste("Longest border state:", longest$NAME, "Length:", longest$border_length, "meters"))
#Enter your code chunk that solves this question. Please leave comments as in detail as possible to show your logical development.
# step 1: First make us_states geometry compatible with st_length - it is currently a POLYGON.
us_states_lines <- st_boundary(us_states)
# step 2: Calculate state line length as a new object.
state_lengths <- st_length(us_states_lines)
# step 3: Assign state lengths to a new attribute in us_states.
us_states$border_length <- state_lengths
# step 4: Order by border length so you can see which state has the longest and the shortest border lengths.
ordered_states <- us_states %>%
arrange(border_length) %>%
select(NAME, border_length)
# finding longest and shortest border
shortest <- head(ordered_states, 1)
longest <- tail(ordered_states, 1)
# printing the values using the correct column name for state names
print(paste("Shortest border state:", shortest$NAME))
print(paste("Longest border state:", longest$NAME))
#Enter your code chunk that solves this question. Please leave comments as in detail as possible to show your logical development.
# create 2 points based on the parameters given
point1 <- st_sfc(st_point(c(0, 0)))
point2 <- st_sfc(st_point(c(7, 1)))
# creating circles of the 2 points
circle1 <- st_buffer(point1, dist = 5)
circle2 <- st_buffer(point2, dist = 6)
# combining the 2 circles
combined_circles <- st_union(circle1, circle2)
# finding the bounding box
bbox <- st_bbox(combined_circles)
# generate random points
set.seed(2024)
points <- st_sample(x = st_as_sfc(bbox), size = 40, type = "random")
# use st_intersects to find which points intersect with each circle
intersects_circle1 <- st_intersects(points, circle1)
intersects_circle2 <- st_intersects(points, circle2)
points_in_both <- lengths(intersects_circle1) > 0 & lengths(intersects_circle2) > 0
indices_in_both <- which(points_in_both)
points_df <- st_as_sf(points) %>%
mutate(index = row_number()) %>%
filter(index %in% indices_in_both)
# plot the circles and the points
plot(st_geometry(combined_circles)) # plotting combined circles
plot(st_geometry(circle1), border = "blue", add = TRUE) # plotting first circle
plot(st_geometry(circle2), border = "red", add = TRUE) # plotting second circle
plot(st_geometry(points), col = "black", pch = 20, add = TRUE) # plotting random points as circles filled in black
plot(st_geometry(points_df), col = "green", pch = 20, add = TRUE) # highlighting points in green that lies in the intersection
