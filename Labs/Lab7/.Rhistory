high_points <- nz_height %>% filter(elevation > 3100)
points_extent <- st_bbox(high_points)
template_raster <- rast(extent = points_extent, res = 3000) # Resolution in meters
# If high_points is an sf object, it needs to be converted to SpatialPoints for rasterization
# This step is hypothetical since direct rasterization from sf to count is not straightforward in terra without a workaround
# Assuming a conversion or direct use, the rasterization for count would look like this:
count_raster <- rasterize(x = high_points, y = template_raster, field = 1, fun = 'count')
max_elev_raster <- rasterize(x = high_points, y = template_raster, field = "elevation", fun = max)
plot(count_raster, main = "Count of Points > 3100m")
plot(max_elev_raster, main = "Maximum Elevation in Each 3km Grid Cell")
reclass_matrix <- matrix(c(-Inf, 300, 1,  # Low class
300, 500, 2,   # Medium class
500, Inf, 3),  # High class
byrow = TRUE, ncol = 3)
# Perform the reclassification
reclassified_dem <- classify(dem, rcl = reclass_matrix)
ndvi = rast(system.file("raster/ndvi.tif", package = "spDataLarge"))
# Compute mean NDVI for each altitudinal class
mean_ndvi_by_class <- zonal(ndvi, reclassified_dem, fun = "mean")
# Compute mean elevation for each altitudinal class using the original DEM
mean_elevation_by_class <- zonal(dem, reclassified_dem, fun = "mean")
# Output the results
print(mean_ndvi_by_class)
print(mean_elevation_by_class)
ndvi_ndwi_stack <- c(ndvi, ndwi)
zion_points <- st_transform(zion_points, crs(srtm))
# Convert sf object (zion_points) to SpatVector
zion_points_vect <- vect(zion_points)
# Now attempt the extraction with the SpatVector object
elevation_values_vect <- extract(srtm, zion_points_vect)
ndvi_ndwi_stack <- c(ndvi, ndwi)
knitr::opts_chunk$set(echo = TRUE)
library(sf)
library(terra)
library(dplyr)
library(spData)
zion_points_path = system.file("vector/zion_points.gpkg", package = "spDataLarge")
zion_points = read_sf(zion_points_path)
srtm = rast(system.file("raster/srtm.tif", package = "spDataLarge"))
ch = st_combine(zion_points) |>
st_convex_hull() |>
st_as_sf()
# Plot the data to understand their geography
plot(srtm)
plot(zion_points, add =TRUE)
plot(ch, add = TRUE)
# cropping using ch dataset
srtm_ch_crop = crop(srtm, ch)
plot(srtm_ch_crop, main = "Crop using convex hull")
points(coords, col = "blue", pch = 20, cex = 1.5)
# cropping using zion-points dataset
srtm_points_crop = crop(srtm, zion_points)
plot(srtm_points_crop, main = "Crop using points")
points(coords, col = "red", pch = 20, cex = 1.5)
# Mask SRTM with zion_points
srtm_points_mask <- mask(srtm, zion_points)
# Mask SRTM with ch (convex hull)
srtm_ch_mask <- mask(srtm, ch)
# Plot the masked SRTM with points
plot(srtm_points_mask, main = "Mask using points")
plot(st_geometry(zion_points), add = TRUE, col = 'red', pch = 20, cex = 1.5)
# Plot the masked SRTM with convex hull
plot(srtm_ch_mask, main = "Mask using convex hull")
plot(st_geometry(ch), add = TRUE, col = 'blue', pch = 20, cex = 1.5)
# 1. Extracting values from SRTM raster at points locations
elevations_at_points <- extract(srtm, zion_points)
# 2. Creating a 500-meter buffer around each point and extracting the average elevation
buffers_500m <- st_buffer(zion_points, dist = 500)
mean_elevations_in_buffers <- extract(srtm, buffers_500m, fun = mean, na.rm = TRUE)
# 3. Combining and comparing these two sets of values
# Convert the extracted values to a data frame
elevations_df <- as.data.frame(elevations_at_points)
# Add the mean elevations as a new column
elevations_df$mean_elevation_in_buffer = mean_elevations_in_buffers
# Note: The column names might need adjustment based on the structure of 'elevations_at_points'
# For clarity, let's rename the columns to be more descriptive
names(elevations_df) <- c("elevation_at_point", "mean_elevation_in_buffer")
# Display the data frame to see the comparison
print(elevations_df)
high_points <- nz_height %>% filter(elevation > 3100)
points_extent <- st_bbox(high_points)
template_raster <- rast(extent = points_extent, res = 3000) # Resolution in meters
# If high_points is an sf object, it needs to be converted to SpatialPoints for rasterization
# This step is hypothetical since direct rasterization from sf to count is not straightforward in terra without a workaround
# Assuming a conversion or direct use, the rasterization for count would look like this:
count_raster <- rasterize(x = high_points, y = template_raster, field = 1, fun = 'count')
max_elev_raster <- rasterize(x = high_points, y = template_raster, field = "elevation", fun = max)
plot(count_raster, main = "Count of Points > 3100m")
plot(max_elev_raster, main = "Maximum Elevation in Each 3km Grid Cell")
reclass_matrix <- matrix(c(-Inf, 300, 1,  # Low class
300, 500, 2,   # Medium class
500, Inf, 3),  # High class
byrow = TRUE, ncol = 3)
# Perform the reclassification
reclassified_dem <- classify(dem, rcl = reclass_matrix)
ndvi = rast(system.file("raster/ndvi.tif", package = "spDataLarge"))
# Compute mean NDVI for each altitudinal class
mean_ndvi_by_class <- zonal(ndvi, reclassified_dem, fun = "mean")
# Compute mean elevation for each altitudinal class using the original DEM
mean_elevation_by_class <- zonal(dem, reclassified_dem, fun = "mean")
# Output the results
print(mean_ndvi_by_class)
print(mean_elevation_by_class)
ndvi_ndwi_stack <- c(ndvi, ndwi)
# Load the Landsat image
landsat <- rast(system.file("raster/landsat.tif", package = "spDataLarge"))
# Apply scaling factor and offset
landsat_scaled <- (landsat * 0.0000275) - 0.2
# Extract bands needed for NDWI and NDVI
green <- landsat_scaled[[2]]
nir <- landsat_scaled[[4]]
red <- landsat_scaled[[3]]
# Calculate NDWI
ndwi <- (green - nir) / (green + nir)
# Calculate NDVI for comparison
ndvi <- (nir - red) / (nir + red)
# Calculate correlation between NDVI and NDWI
# First, stack the layers
ndvi_ndwi_stack <- c(ndvi, ndwi)
# Then, calculate the correlation
correlation <- layerCor(ndvi_ndwi_stack)
knitr::opts_chunk$set(echo = TRUE)
library(sf)
library(terra)
library(dplyr)
library(spData)
zion_points_path = system.file("vector/zion_points.gpkg", package = "spDataLarge")
zion_points = read_sf(zion_points_path)
srtm = rast(system.file("raster/srtm.tif", package = "spDataLarge"))
ch = st_combine(zion_points) |>
st_convex_hull() |>
st_as_sf()
# Plot the data to understand their geography
plot(srtm)
plot(zion_points, add =TRUE)
plot(ch, add = TRUE)
# cropping using ch dataset
srtm_ch_crop = crop(srtm, ch)
plot(srtm_ch_crop, main = "Crop using convex hull")
points(coords, col = "blue", pch = 20, cex = 1.5)
# cropping using zion-points dataset
srtm_points_crop = crop(srtm, zion_points)
plot(srtm_points_crop, main = "Crop using points")
points(coords, col = "red", pch = 20, cex = 1.5)
# Mask SRTM with zion_points
srtm_points_mask <- mask(srtm, zion_points)
# Mask SRTM with ch (convex hull)
srtm_ch_mask <- mask(srtm, ch)
# Plot the masked SRTM with points
plot(srtm_points_mask, main = "Mask using points")
plot(st_geometry(zion_points), add = TRUE, col = 'red', pch = 20, cex = 1.5)
# Plot the masked SRTM with convex hull
plot(srtm_ch_mask, main = "Mask using convex hull")
plot(st_geometry(ch), add = TRUE, col = 'blue', pch = 20, cex = 1.5)
# 1. Extracting values from SRTM raster at points locations
elevations_at_points <- extract(srtm, zion_points)
# 2. Creating a 500-meter buffer around each point and extracting the average elevation
buffers_500m <- st_buffer(zion_points, dist = 500)
mean_elevations_in_buffers <- extract(srtm, buffers_500m, fun = mean, na.rm = TRUE)
# 3. Combining and comparing these two sets of values
# Convert the extracted values to a data frame
elevations_df <- as.data.frame(elevations_at_points)
# Add the mean elevations as a new column
elevations_df$mean_elevation_in_buffer = mean_elevations_in_buffers
# Note: The column names might need adjustment based on the structure of 'elevations_at_points'
# For clarity, let's rename the columns to be more descriptive
names(elevations_df) <- c("elevation_at_point", "mean_elevation_in_buffer")
# Display the data frame to see the comparison
print(elevations_df)
high_points <- nz_height %>% filter(elevation > 3100)
points_extent <- st_bbox(high_points)
template_raster <- rast(extent = points_extent, res = 3000) # Resolution in meters
# If high_points is an sf object, it needs to be converted to SpatialPoints for rasterization
# This step is hypothetical since direct rasterization from sf to count is not straightforward in terra without a workaround
# Assuming a conversion or direct use, the rasterization for count would look like this:
count_raster <- rasterize(x = high_points, y = template_raster, field = 1, fun = 'count')
max_elev_raster <- rasterize(x = high_points, y = template_raster, field = "elevation", fun = max)
plot(count_raster, main = "Count of Points > 3100m")
plot(max_elev_raster, main = "Maximum Elevation in Each 3km Grid Cell")
reclass_matrix <- matrix(c(-Inf, 300, 1,  # Low class
300, 500, 2,   # Medium class
500, Inf, 3),  # High class
byrow = TRUE, ncol = 3)
# Perform the reclassification
reclassified_dem <- classify(dem, rcl = reclass_matrix)
ndvi = rast(system.file("raster/ndvi.tif", package = "spDataLarge"))
# Compute mean NDVI for each altitudinal class
mean_ndvi_by_class <- zonal(ndvi, reclassified_dem, fun = "mean")
# Compute mean elevation for each altitudinal class using the original DEM
mean_elevation_by_class <- zonal(dem, reclassified_dem, fun = "mean")
# Output the results
print(mean_ndvi_by_class)
print(mean_elevation_by_class)
# Load the Landsat image
landsat <- rast(system.file("raster/landsat.tif", package = "spDataLarge"))
# Apply scaling factor and offset
landsat_scaled <- (landsat * 0.0000275) - 0.2
# Extract bands needed for NDWI and NDVI
green <- landsat_scaled[[2]]
nir <- landsat_scaled[[4]]
red <- landsat_scaled[[3]]
# Calculate NDWI
ndwi <- (green - nir) / (green + nir)
# Calculate NDVI for comparison
ndvi <- (nir - red) / (nir + red)
# Calculate correlation between NDVI and NDWI
# First, stack the layers
ndvi_ndwi_stack <- c(ndvi, ndwi)
# Then, calculate the correlation
correlation <- layerCor(ndvi_ndwi_stack)
# Load the Landsat image and apply scaling factor and offset
landsat <- rast(system.file("raster/landsat.tif", package = "spDataLarge"))
landsat_scaled <- (landsat * 0.0000275) - 0.2
# Extract the necessary bands
green <- landsat_scaled[[2]] # Green band
nir <- landsat_scaled[[4]]   # Near-Infrared (NIR) band
red <- landsat_scaled[[3]]   # Red band
# Calculate NDWI
ndwi <- (green - nir) / (green + nir)
# Calculate NDVI for comparison
ndvi <- (nir - red) / (nir + red)
# Extract values from NDVI and NDWI for correlation calculation
ndvi_values <- values(ndvi)
ndwi_values <- values(ndwi)
# Ensure to only include non-NA values for correlation
valid_indices <- !is.na(ndvi_values) & !is.na(ndwi_values)
ndvi_valid <- ndvi_values[valid_indices]
ndwi_valid <- ndwi_values[valid_indices]
# Calculate the correlation between NDVI and NDWI
correlation_value <- cor(ndvi_valid, ndwi_valid)
# Print the correlation value
print(correlation_value)
knitr::opts_chunk$set(echo = TRUE)
library(sf)
library(terra)
library(dplyr)
library(spData)
zion_points_path = system.file("vector/zion_points.gpkg", package = "spDataLarge")
zion_points = read_sf(zion_points_path)
srtm = rast(system.file("raster/srtm.tif", package = "spDataLarge"))
ch = st_combine(zion_points) |>
st_convex_hull() |>
st_as_sf()
# Plot the data to understand their geography
plot(srtm)
plot(zion_points, add =TRUE)
plot(ch, add = TRUE)
# cropping using ch dataset
srtm_ch_crop = crop(srtm, ch)
plot(srtm_ch_crop, main = "Crop using convex hull")
points(coords, col = "blue", pch = 20, cex = 1.5)
# cropping using zion-points dataset
srtm_points_crop = crop(srtm, zion_points)
plot(srtm_points_crop, main = "Crop using points")
points(coords, col = "red", pch = 20, cex = 1.5)
# Mask SRTM with zion_points
srtm_points_mask <- mask(srtm, zion_points)
# Mask SRTM with ch (convex hull)
srtm_ch_mask <- mask(srtm, ch)
# Plot the masked SRTM with points
plot(srtm_points_mask, main = "Mask using points")
plot(st_geometry(zion_points), add = TRUE, col = 'red', pch = 20, cex = 1.5)
# Plot the masked SRTM with convex hull
plot(srtm_ch_mask, main = "Mask using convex hull")
plot(st_geometry(ch), add = TRUE, col = 'blue', pch = 20, cex = 1.5)
# 1. Extracting values from SRTM raster at points locations
elevations_at_points <- extract(srtm, zion_points)
# 2. Creating a 500-meter buffer around each point and extracting the average elevation
buffers_500m <- st_buffer(zion_points, dist = 500)
mean_elevations_in_buffers <- extract(srtm, buffers_500m, fun = mean, na.rm = TRUE)
# 3. Combining and comparing these two sets of values
# Convert the extracted values to a data frame
elevations_df <- as.data.frame(elevations_at_points)
# Add the mean elevations as a new column
elevations_df$mean_elevation_in_buffer = mean_elevations_in_buffers
# Note: The column names might need adjustment based on the structure of 'elevations_at_points'
# For clarity, let's rename the columns to be more descriptive
names(elevations_df) <- c("elevation_at_point", "mean_elevation_in_buffer")
# Display the data frame to see the comparison
print(elevations_df)
high_points <- nz_height %>% filter(elevation > 3100)
points_extent <- st_bbox(high_points)
template_raster <- rast(extent = points_extent, res = 3000) # Resolution in meters
# If high_points is an sf object, it needs to be converted to SpatialPoints for rasterization
# This step is hypothetical since direct rasterization from sf to count is not straightforward in terra without a workaround
# Assuming a conversion or direct use, the rasterization for count would look like this:
count_raster <- rasterize(x = high_points, y = template_raster, field = 1, fun = 'count')
max_elev_raster <- rasterize(x = high_points, y = template_raster, field = "elevation", fun = max)
plot(count_raster, main = "Count of Points > 3100m")
plot(max_elev_raster, main = "Maximum Elevation in Each 3km Grid Cell")
reclass_matrix <- matrix(c(-Inf, 300, 1,  # Low class
300, 500, 2,   # Medium class
500, Inf, 3),  # High class
byrow = TRUE, ncol = 3)
# Perform the reclassification
reclassified_dem <- classify(dem, rcl = reclass_matrix)
ndvi = rast(system.file("raster/ndvi.tif", package = "spDataLarge"))
# Compute mean NDVI for each altitudinal class
mean_ndvi_by_class <- zonal(ndvi, reclassified_dem, fun = "mean")
# Compute mean elevation for each altitudinal class using the original DEM
mean_elevation_by_class <- zonal(dem, reclassified_dem, fun = "mean")
# Output the results
print(mean_ndvi_by_class)
print(mean_elevation_by_class)
# Load the Landsat image and apply scaling factor and offset
landsat <- rast(system.file("raster/landsat.tif", package = "spDataLarge"))
landsat_scaled <- (landsat * 0.0000275) - 0.2
# Extract the necessary bands
green <- landsat_scaled[[2]] # Green band
nir <- landsat_scaled[[4]]   # Near-Infrared (NIR) band
red <- landsat_scaled[[3]]   # Red band
# Calculate NDWI
ndwi <- (green - nir) / (green + nir)
# Calculate NDVI for comparison
ndvi <- (nir - red) / (nir + red)
# Extract values from NDVI and NDWI for correlation calculation
ndvi_values <- values(ndvi)
ndwi_values <- values(ndwi)
# Ensure to only include non-NA values for correlation
valid_indices <- !is.na(ndvi_values) & !is.na(ndwi_values)
ndvi_valid <- ndvi_values[valid_indices]
ndwi_valid <- ndwi_values[valid_indices]
# Calculate the correlation between NDVI and NDWI
correlation_value <- cor(ndvi_valid, ndwi_valid)
# Print the correlation value
print(correlation_value)
# masking SRTM with zion_points
srtm_points_mask <- mask(srtm, zion_points)
# masking SRTM with ch
srtm_ch_mask <- mask(srtm, ch)
# plotting the masked SRTM with points
plot(srtm_points_mask, main = "Mask using points")
plot(st_geometry(zion_points), add = TRUE, col = 'red', pch = 20)
# plotting the masked SRTM with ch
plot(srtm_ch_mask, main = "Mask using convex hull")
plot(st_geometry(ch), add = TRUE, col = 'blue', pch = 20)
# step 1
elevations_at_points <- extract(srtm, zion_points)
# step 2
buffers_500m <- st_buffer(zion_points, dist = 500)
mean_elevations_in_buffers <- extract(srtm, buffers_500m, fun = mean, na.rm = TRUE)
# step 3
elevations_df <- as.data.frame(elevations_at_points)
elevations_df$mean_elevation_in_buffer = mean_elevations_in_buffers
# Note: The column names might need adjustment based on the structure of 'elevations_at_points'
# For clarity, let's rename the columns to be more descriptive
#names(elevations_df) <- c("elevation_at_point", "mean_elevation_in_buffer")
# Display the data frame to see the comparison
print(elevations_df)
# step 1
elevations_at_points <- extract(srtm, zion_points)
# step 2
buffers_500m <- st_buffer(zion_points, dist = 500)
mean_elevations_in_buffers <- extract(srtm, buffers_500m, fun = mean, na.rm = TRUE)
# step 3
elevations_df <- as.data.frame(elevations_at_points)
elevations_df$mean_elevation_in_buffer = mean_elevations_in_buffers
# Note: The column names might need adjustment based on the structure of 'elevations_at_points'
# For clarity, let's rename the columns to be more descriptive
names(elevations_df) <- c("elevation_at_point", "mean_elevation_in_buffer")
# Display the data frame to see the comparison
print(elevations_df)
# step 1
elevations_at_points <- extract(srtm, zion_points)
# step 2
buffers_500m <- st_buffer(zion_points, dist = 500)
mean_elevations_in_buffers <- extract(srtm, buffers_500m, fun = mean, na.rm = TRUE)
# step 3
elevations_df <- as.data.frame(elevations_at_points)
elevations_df$mean_elevation_in_buffer = mean_elevations_in_buffers
# Note: The column names might need adjustment based on the structure of 'elevations_at_points'
# For clarity, let's rename the columns to be more descriptive
#names(elevations_df) <- c("elevation_at_point", "mean_elevation_in_buffer")
# Display the data frame to see the comparison
print(elevations_df)
# step 1
elevations_at_points <- extract(srtm, zion_points)
# step 2
buffers_500m <- st_buffer(zion_points, dist = 500)
mean_elevations_in_buffers <- extract(srtm, buffers_500m, fun = mean, na.rm = TRUE)
# step 3
elevations_df <- as.data.frame(elevations_at_points)
elevations_df$mean_elevation_in_buffer = mean_elevations_in_buffers
names(elevations_df) <- c("elevation at zion point", "mean elevation in buffer")
print(elevations_df)
# step 1
high_points <- nz_height %>% filter(elevation > 3100)
points_extent <- st_bbox(high_points)
# step 2
template_raster <- rast(extent = points_extent, res = 3000) # Resolution in meters
count_raster <- rasterize(x = high_points, y = template_raster, field = 1, fun = 'count')
max_elev_raster <- rasterize(x = high_points, y = template_raster, field = "elevation", fun = max)
# step 3
plot(count_raster, main = "Count of Points > 3100m")
# step 4
plot(max_elev_raster, main = "Maximum Elevation in Each 3km Grid Cell")
# step 1
reclass_matrix <- matrix(c(-Inf, 300, 1,  # low
300, 500, 2,   # medium
500, Inf, 3),  # high
byrow = TRUE, ncol = 3)
reclassified_dem <- classify(dem, rcl = reclass_matrix)
# step 2
ndvi = rast(system.file("raster/ndvi.tif", package = "spDataLarge"))
mean_ndvi_by_class <- zonal(ndvi, reclassified_dem, fun = "mean")
mean_elevation_by_class <- zonal(dem, reclassified_dem, fun = "mean")
print(mean_ndvi_by_class)
print(mean_elevation_by_class)
# load the landsat image and apply scaling factor and offset based on requirements
landsat <- rast(system.file("raster/landsat.tif", package = "spDataLarge"))
landsat_scaled <- (landsat * 0.0000275) - 0.2
# extract the necessary bands
green <- landsat_scaled[[2]]
nir <- landsat_scaled[[4]]
red <- landsat_scaled[[3]]
# calculating NDWI
ndwi <- (green - nir) / (green + nir)
# calculating NDVI
ndvi <- (nir - red) / (nir + red)
# bonus question
ndvi_values <- values(ndvi)
ndwi_values <- values(ndwi)
valid_indices <- !is.na(ndvi_values) & !is.na(ndwi_values)
ndvi_valid <- ndvi_values[valid_indices]
ndwi_valid <- ndwi_values[valid_indices]
correlation_value <- cor(ndvi_valid, ndwi_valid)
print(correlation_value)
knitr::opts_chunk$set(echo = TRUE)
library(sf)
library(terra)
library(dplyr)
library(spData)
zion_points_path = system.file("vector/zion_points.gpkg", package = "spDataLarge")
zion_points = read_sf(zion_points_path)
srtm = rast(system.file("raster/srtm.tif", package = "spDataLarge"))
ch = st_combine(zion_points) |>
st_convex_hull() |>
st_as_sf()
# Plot the data to understand their geography
plot(srtm)
plot(zion_points, add =TRUE)
plot(ch, add = TRUE)
# cropping using ch dataset
srtm_ch_crop = crop(srtm, ch)
plot(srtm_ch_crop, main = "Crop using convex hull")
points(coords, col = "blue", pch = 20, cex = 1.5)
# cropping using zion-points dataset
srtm_points_crop = crop(srtm, zion_points)
plot(srtm_points_crop, main = "Crop using points")
points(coords, col = "red", pch = 20, cex = 1.5)
# masking SRTM with zion_points
srtm_points_mask <- mask(srtm, zion_points)
# masking SRTM with ch
srtm_ch_mask <- mask(srtm, ch)
# plotting the masked SRTM with points
plot(srtm_points_mask, main = "Mask using points")
plot(st_geometry(zion_points), add = TRUE, col = 'red', pch = 20)
# plotting the masked SRTM with ch
plot(srtm_ch_mask, main = "Mask using convex hull")
plot(st_geometry(ch), add = TRUE, col = 'blue', pch = 20)
# step 1
elevations_at_points <- extract(srtm, zion_points)
# step 2
buffers_500m <- st_buffer(zion_points, dist = 500)
mean_elevations_in_buffers <- extract(srtm, buffers_500m, fun = mean, na.rm = TRUE)
# step 3
elevations_df <- as.data.frame(elevations_at_points)
elevations_df$mean_elevation_in_buffer = mean_elevations_in_buffers
names(elevations_df) <- c("elevation at zion point", "mean elevation in buffer")
print(elevations_df)
# step 1
high_points <- nz_height %>% filter(elevation > 3100)
points_extent <- st_bbox(high_points)
# step 2
template_raster <- rast(extent = points_extent, res = 3000) # Resolution in meters
count_raster <- rasterize(x = high_points, y = template_raster, field = 1, fun = 'count')
max_elev_raster <- rasterize(x = high_points, y = template_raster, field = "elevation", fun = max)
# step 3
plot(count_raster, main = "Count of Points > 3100m")
# step 4
plot(max_elev_raster, main = "Maximum Elevation in Each 3km Grid Cell")
# step 1
reclass_matrix <- matrix(c(-Inf, 300, 1,  # low
300, 500, 2,   # medium
500, Inf, 3),  # high
byrow = TRUE, ncol = 3)
reclassified_dem <- classify(dem, rcl = reclass_matrix)
# step 2
ndvi = rast(system.file("raster/ndvi.tif", package = "spDataLarge"))
mean_ndvi_by_class <- zonal(ndvi, reclassified_dem, fun = "mean")
mean_elevation_by_class <- zonal(dem, reclassified_dem, fun = "mean")
print(mean_ndvi_by_class)
print(mean_elevation_by_class)
# load the landsat image and apply scaling factor and offset based on requirements
landsat <- rast(system.file("raster/landsat.tif", package = "spDataLarge"))
landsat_scaled <- (landsat * 0.0000275) - 0.2
# extract the necessary bands
green <- landsat_scaled[[2]]
nir <- landsat_scaled[[4]]
red <- landsat_scaled[[3]]
# calculating NDWI
ndwi <- (green - nir) / (green + nir)
# calculating NDVI
ndvi <- (nir - red) / (nir + red)
# bonus question
ndvi_values <- values(ndvi)
ndwi_values <- values(ndwi)
valid_indices <- !is.na(ndvi_values) & !is.na(ndwi_values)
ndvi_valid <- ndvi_values[valid_indices]
ndwi_valid <- ndwi_values[valid_indices]
correlation_value <- cor(ndvi_valid, ndwi_valid)
print(correlation_value)
